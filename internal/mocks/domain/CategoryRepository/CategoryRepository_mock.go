// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package categoryRepositoryMock

import (
	"github.com/Ch94Ca/ms-nexusMarket-inventory/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Create(category *domain.Category) error {
	ret := _mock.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Category) error); ok {
		r0 = returnFunc(category)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCategoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - category *domain.Category
func (_e *MockCategoryRepository_Expecter) Create(category interface{}) *MockCategoryRepository_Create_Call {
	return &MockCategoryRepository_Create_Call{Call: _e.mock.On("Create", category)}
}

func (_c *MockCategoryRepository_Create_Call) Run(run func(category *domain.Category)) *MockCategoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Category
		if args[0] != nil {
			arg0 = args[0].(*domain.Category)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Create_Call) Return(err error) *MockCategoryRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Create_Call) RunAndReturn(run func(category *domain.Category) error) *MockCategoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Delete(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCategoryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockCategoryRepository_Expecter) Delete(id interface{}) *MockCategoryRepository_Delete_Call {
	return &MockCategoryRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockCategoryRepository_Delete_Call) Run(run func(id int)) *MockCategoryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Delete_Call) Return(err error) *MockCategoryRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Delete_Call) RunAndReturn(run func(id int) error) *MockCategoryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) GetByID(id int) (*domain.Category, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (*domain.Category, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) *domain.Category); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCategoryRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *MockCategoryRepository_Expecter) GetByID(id interface{}) *MockCategoryRepository_GetByID_Call {
	return &MockCategoryRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockCategoryRepository_GetByID_Call) Run(run func(id int)) *MockCategoryRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_GetByID_Call) Return(category *domain.Category, err error) *MockCategoryRepository_GetByID_Call {
	_c.Call.Return(category, err)
	return _c
}

func (_c *MockCategoryRepository_GetByID_Call) RunAndReturn(run func(id int) (*domain.Category, error)) *MockCategoryRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) ListAll() ([]*domain.Category, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []*domain.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*domain.Category, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*domain.Category); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type MockCategoryRepository_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
func (_e *MockCategoryRepository_Expecter) ListAll() *MockCategoryRepository_ListAll_Call {
	return &MockCategoryRepository_ListAll_Call{Call: _e.mock.On("ListAll")}
}

func (_c *MockCategoryRepository_ListAll_Call) Run(run func()) *MockCategoryRepository_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCategoryRepository_ListAll_Call) Return(categorys []*domain.Category, err error) *MockCategoryRepository_ListAll_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoryRepository_ListAll_Call) RunAndReturn(run func() ([]*domain.Category, error)) *MockCategoryRepository_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Update(category *domain.Category) error {
	ret := _mock.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Category) error); ok {
		r0 = returnFunc(category)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCategoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - category *domain.Category
func (_e *MockCategoryRepository_Expecter) Update(category interface{}) *MockCategoryRepository_Update_Call {
	return &MockCategoryRepository_Update_Call{Call: _e.mock.On("Update", category)}
}

func (_c *MockCategoryRepository_Update_Call) Run(run func(category *domain.Category)) *MockCategoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Category
		if args[0] != nil {
			arg0 = args[0].(*domain.Category)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Update_Call) Return(err error) *MockCategoryRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Update_Call) RunAndReturn(run func(category *domain.Category) error) *MockCategoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
